from dotenv import load_dotenv
import os
from langchain.agents import *
from langchain.llms import OpenAI
from langchain.sql_database import SQLDatabase
from langchain.agents.agent_toolkits import SQLDatabaseToolkit
from langchain.agents import AgentExecutor
from langchain.chat_models import ChatOpenAI
import streamlit as st


def init_database(user:str,password:str,host:str,port:str,database:str)->SQLDatabase:
    """Initialize the database connection"""
    db=SQLDatabase.from_uri(f'mysql+pymysql://{user}:{password}@{host}/{database}')
    return db


def message(db,query):
        '''Will take query from user and return the respnse
          query(string) is the  question given by the user
          respnse(string) is the response generated by the llm'''
        
        #connecting database
        db=db

        #initialising llms
        llm=ChatOpenAI(model_name='gpt-3.5-turbo', openai_api_key=openai_api_key)

        #initialising toolkit
        toolkit=SQLDatabaseToolkit(db=db,llm=llm,verbose=True)

        #creating agent executer
        agent_executer=create_sql_agent(llm=llm,toolkit=toolkit,handle_parsing_errors=True)

        response=agent_executer.run(query)
        return response


from dotenv import load_dotenv
load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")


st.set_page_config(page_title="Chat With MySQL", page_icon=":speech_baloon:")

st.title("Chat with MYSQL")

with st.sidebar:
    st.subheader("Settings")
    st.write("Chat application for MYSQL. COnnect to database and start chatting")

    st.text_input("Host",value='localhost',key="Host")
    st.text_input("Port",value="3306",key="Port")
    st.text_input("User",value="root",key="User")
    st.text_input("Password",type="password",value="1234",key="Password")
    st.text_input("Database",value="sample_dataset", key="Database")

    if st.button("Connect"):
        with st.spinner("Connecting to Database..."):
            db=init_database(
                st.session_state["User"],
                st.session_state["Password"],
                st.session_state["Host"],
                st.session_state["Port"],
                st.session_state["Database"]
            )
            st.session_state.db=db
            st.success("Connected to Database")


query=st.chat_input('Type a message ...')
if query:
    if st.session_state.db:
        response = message(st.session_state.db, query)
        st.write("Response:", response)
    else:
        st.error("Please connect to the database first.")